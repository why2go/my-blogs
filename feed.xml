<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://why2go.github.io/</id><title>why2go</title><subtitle>A blog site.</subtitle> <updated>2022-06-09T09:44:08+08:00</updated> <author> <name>why2go</name> <uri>https://why2go.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://why2go.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://why2go.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 why2go </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>redis使用bloom filter</title><link href="https://why2go.github.io/posts/redis%E4%BD%BF%E7%94%A8bloom-filter/" rel="alternate" type="text/html" title="redis使用bloom filter" /><published>2022-06-09T00:00:00+08:00</published> <updated>2022-06-09T00:00:00+08:00</updated> <id>https://why2go.github.io/posts/redis%E4%BD%BF%E7%94%A8bloom-filter/</id> <content src="https://why2go.github.io/posts/redis%E4%BD%BF%E7%94%A8bloom-filter/" /> <author> <name>why2go</name> </author> <category term="redis" /> <category term="bloom" /> <summary> 什么是布隆过滤器？ 怎么用Redis实现布隆过滤器？ Redis组件加载 Redis Lab 和 阿里云增强型Redis </summary> </entry> <entry><title>OpenSSL</title><link href="https://why2go.github.io/posts/OpenSSL/" rel="alternate" type="text/html" title="OpenSSL" /><published>2021-09-07T00:00:00+08:00</published> <updated>2021-09-07T00:00:00+08:00</updated> <id>https://why2go.github.io/posts/OpenSSL/</id> <content src="https://why2go.github.io/posts/OpenSSL/" /> <author> <name>why2go</name> </author> <category term="openssl" /> <summary> OpenSSL TLS、证书、CA、公钥私钥等概念，在OpenSSL的实现中都有体现。 可以通过对OpenSSL的学习，来逐步地了解上述的概念。 描述 OpenSSL是一个密码学工具箱，它实现了SSL（v2，v3）以及TLSv1，以及这些协议所使用到的密码学工具。 它的主要用途有以下几个： 创建并管理私钥、公钥以及参数 公钥加密操作 创建X.509证书、CSR（证书签名请求）、CRL（证书回收列表） 消息摘要计算 使用密码工具来加密解密 SSL/TLS客户端和服务器测试 处理S/MIME签名或者加密邮件 时间戳请求、创建以及验证 使用 基本使用形式为： openssl command [ command_opts ] [ command_args ] OpenSSL支持很多的命令，使用openssl list -help可以查... </summary> </entry> <entry><title>JWT</title><link href="https://why2go.github.io/posts/JWT/" rel="alternate" type="text/html" title="JWT" /><published>2021-09-07T00:00:00+08:00</published> <updated>2021-09-07T00:00:00+08:00</updated> <id>https://why2go.github.io/posts/JWT/</id> <content src="https://why2go.github.io/posts/JWT/" /> <author> <name>why2go</name> </author> <category term="jwt" /> <summary> JWT jwt由三部分组成：Header、Playload、Signature/Encryption Header和Playload是JSON对象。 签名和加密依赖于使用的算法，如果jwt不进行签名或加密，则没有这一部分。 Header 头部用于说明jwt使用何种算法签名或加密，alg字段是必须要有的 不加密jwt头部只有一个字段： { "alg": "none" } 可选字段有：typ和cty typ表示jwt媒介的类型，目的是为了区别JOSE头部，通常字段值都是JWT cty表示内容类型，许多jwt的负载都承载了其他的claim，此时不能出现该字段，除非JWT的载荷还是一个jwt，此时，cty的值是jwt。cty一般都不会出现。 Playload 载荷是一个JSON对象，由claim组成。jwt没有强制必须由哪些载荷，但是规范里定义了一些clai... </summary> </entry> <entry><title>docker搭建mongodb集群</title><link href="https://why2go.github.io/posts/docker%E6%90%AD%E5%BB%BAmongodb%E9%9B%86%E7%BE%A4/" rel="alternate" type="text/html" title="docker搭建mongodb集群" /><published>2021-08-07T00:00:00+08:00</published> <updated>2021-08-07T00:00:00+08:00</updated> <id>https://why2go.github.io/posts/docker%E6%90%AD%E5%BB%BAmongodb%E9%9B%86%E7%BE%A4/</id> <content src="https://why2go.github.io/posts/docker%E6%90%AD%E5%BB%BAmongodb%E9%9B%86%E7%BE%A4/" /> <author> <name>why2go</name> </author> <category term="mongodb" /> <category term="docker" /> <summary> 本文按照mongodb网站上的指导教程使用docker搭建了一个shard集群，供学习参考。 该配置适用于Linux系统，Mac系统上的docker网络实现与Linux不相同，宿主机与容器通信会存在问题，需要另行处理。 现有如下目录结构： . ├── docker-compose.yaml └── shard-setup └── setup.sh 其中，docker-compose.yaml内容如下，文章撰写时，mongodb版本最新为5.0.0： version: "3.8" services: shard-setup: hostname: shard-setup container_name: shard-setup image: mongo:5.0.0 entrypoint: /usr/bin/bash /shard-set... </summary> </entry> </feed>
